{"version":3,"sources":["components/Notification.jsx","App.js","index.js"],"names":["Notification","props","message","className","socket","io","App","useState","score","setScore","nextWin","setNextWin","notificationMsg","setNotificationMsg","useEffect","on","localStorage","getItem","emit","Number","status","setItem","won","setTimeout","window","confirm","onClick","e","ReactDOM","render","document","getElementById"],"mappings":"kRAceA,EAZM,SAACC,GACpB,OAAKA,EAAMC,QAKT,yBAAKC,UAAU,gBACb,2BAAIF,EAAMC,UALL,MCALE,E,MAASC,GAAG,KA0DHC,EAxDH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACRC,EADQ,KACDC,EADC,OAEgBF,mBAAS,IAFzB,mBAERG,EAFQ,KAECC,EAFD,OAGgCJ,mBAAS,MAHzC,mBAGRK,EAHQ,KAGSC,EAHT,KAKhBC,qBAAU,WACRV,EAAOW,GAAG,WAAW,WAChBC,aAAaC,QAAQ,UACtBb,EAAOc,KAAK,SAAUC,OAAOH,aAAaC,QAAQ,cAItDb,EAAOW,GAAG,UAAU,SAACK,GACnBX,EAASW,EAAOZ,OAChBG,EAAWS,EAAOV,SAClBM,aAAaK,QAAQ,QAASD,EAAOZ,OAGjCY,EAAOE,MACTT,EAAmB,WAAD,OAAYO,EAAOE,IAAnB,aAElBC,YAAW,WACTV,EAAmB,QAClB,MAIgB,IAAjBO,EAAOZ,OACNgB,OAAOC,QAAQ,6CAChBrB,EAAOc,KAAK,gBAGjB,IAcH,OACE,yBAAKf,UAAU,QACb,uBAAGA,UAAU,SAAb,YAA+BK,GAC/B,4BAAQkB,QAfQ,SAACC,GACfnB,GAAS,EACRgB,OAAOC,QAAQ,6CAChBrB,EAAOc,KAAK,WAMhBd,EAAOc,KAAK,UAMoBf,UAAU,WAAxC,UACA,uBAAGA,UAAU,WAAb,uBAA4CO,EAA5C,gBACA,kBAAC,EAAD,CAAcR,QAASU,MCrD7BgB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.591c1d02.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Notification = (props) => {\r\n  if (!props.message) {\r\n    return null;\r\n  }\r\n  \r\n  return (\r\n    <div className=\"notification\">\r\n      <p>{props.message}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notification;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport io from 'socket.io-client';\nimport Notification from './components/Notification';\nconst socket = io('/');\n\nconst App = () => {\n  const [ score, setScore ] = useState(20);\n  const [ nextWin, setNextWin ] = useState(10);\n  const [ notificationMsg, setNotificationMsg ] = useState(null);\n\n  useEffect(() => {\n    socket.on('connect', () => {\n      if(localStorage.getItem('score')) {\n        socket.emit('return', Number(localStorage.getItem('score')));\n      }\n    });\n\n    socket.on('update', (status) => {\n      setScore(status.score);\n      setNextWin(status.nextWin);\n      localStorage.setItem('score', status.score);\n\n      // Player won\n      if (status.won) {\n        setNotificationMsg(`You won ${status.won} points!`);\n\n        setTimeout(() => {\n          setNotificationMsg(null);\n        }, 3000);\n      }\n\n      // Ask if the player wants to start over when losing\n      if (status.score === 0\n        && window.confirm('0 pistettä! Haluatko aloittaa alusta?')) {\n          socket.emit('restart');\n      }\n    });\n  }, []);\n\n  const handleClick = (e) => {\n    if (score <= 0) {\n      if(window.confirm('0 pistettä! Haluatko aloittaa alusta?')) {\n        socket.emit('restart');\n      }\n\n      return;\n    }\n\n    socket.emit('click');\n  };\n  \n  return (\n    <div className=\"peli\">\n      <p className=\"score\">Pisteet: {score}</p>\n      <button onClick={handleClick} className=\"painike\">CLICK!</button>\n      <p className=\"nextwin\">Seuraavaan voittoon {nextWin} painallusta</p>\n      <Notification message={notificationMsg} />\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}